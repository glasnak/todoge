{"version":3,"sources":["Components/TodoApp.jsx","App.jsx","registerServiceWorker.js","index.js","doge.svg"],"names":["Title","react_default","a","createElement","TodoForm","_ref","input","addTodo","action","onSubmit","value","ref","node","type","Todo","_ref2","todo","remove","onClick","id","text","TodoList","_ref3","todos","todoNode","map","TodoApp_Todo","key","window","TodoApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","val","push","setState","remainder","filter","TodoApp_Title","TodoApp_TodoForm","bind","TodoApp_TodoList","handleRemove","Component","App","document","title","className","src","doggo","alt","Components_TodoApp","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9299d19d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Title = () => (\n  <div>\n    <h3>\n      Very todo. Much react.\n    </h3>\n  </div>\n);\n\nconst TodoForm = ({ addTodo }) => {\n  // Input tracker\n  let input;\n\n  return (\n    <div>\n      <form\n        action=\"#\"\n        onSubmit={() => {\n          addTodo(input.value);\n          input.value = '';\n        }}\n      >\n        <input ref={(node) => {\n          input = node;\n        }}\n        />\n        <button type=\"submit\">\n          add\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst Todo = ({ todo, remove }) => (\n  <li onClick={() => { remove(todo.id); }}>\n    {todo.text}\n  </li>\n);\n\nconst TodoList = ({ todos, remove }) => {\n  // Map through the todos\n  const todoNode = todos.map(todo => (<Todo todo={todo} key={todo.id} remove={remove} />));\n  return (\n    <ul>\n      {todoNode}\n    </ul>\n  );\n};\n\n\n// Container Component\nwindow.id = 0;\nclass TodoApp extends Component {\n  constructor(props) {\n    // Pass props to parent class\n    super(props);\n    // Set initial state\n    this.state = {\n      data: []\n    };\n  }\n\n  // Add todo handler\n  addTodo(val) {\n    if (val === '') {\n      return;\n    }\n    // Assemble data\n    const todo = { text: val, id: window.id++ };\n    // Update data\n    this.state.data.push(todo);\n    // Update state\n    this.setState({ data: this.state.data });\n  }\n\n  // Handle remove\n  handleRemove(id) {\n    // Filter all todos except the one to be removed\n    const remainder = this.state.data.filter((todo) => {\n      if (todo.id !== id) return todo;\n      return null;\n    });\n    // Update state with filter\n    this.setState({ data: remainder });\n  }\n\n  render() {\n    return (\n      <div>\n        <Title />\n        <TodoForm addTodo={this.addTodo.bind(this)} />\n        <TodoList\n          todos={this.state.data}\n          remove={this.handleRemove.bind(this)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TodoApp;\n","import React, { Component } from 'react';\nimport TodoApp from './Components/TodoApp';\nimport doggo from './doge.svg';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = 'ToĐoge';\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={doggo} className=\"App-logo\" alt=\"pls\" />\n          <h1 className=\"App-title\">\n            ToĐoge\n          </h1>\n        </header>\n        <div>\n          <TodoApp />\n          {/* <TodoForm/> */}\n          {/* <TodoList todos={[{id: 999, text: 'text'}]}/> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/doge.82bac535.svg\";"],"sourceRoot":""}